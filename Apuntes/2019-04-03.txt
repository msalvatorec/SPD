
Formula para saber cuantos Bits de paridad preciso en codificación Hamming.

2**p >= n+p+1
n es la cantidad de bits de datos
Teniendo el dato 10010, n=5.

pruebo para p=1
2**1>=5+1+1
2>=7
no se cumple

p=2
2**2>=5+2+1
4>=8
no se cumple

p=3
2**3>=5+3+1
8>=9
no se cumple

p=4
2**4>=5+4+1
16>=10
Si se cumple; necesito entonces 4 bits de paridad; p=4.

1	0	0	1	0
d1	d2	d3	d4	d5


|___|	|___|	|___|	|___|	|___|	|___|	|___|	|___|	|___|
 p1      p2   	 d1    	 p3   	 d2    	 d3    	 d4    	 p4    	 d5
 0001	0010	0011	0100	0101	0110	0111	1000	1001

 p1= d1 d2 d3 d4 // 1010 
 p2= d1 d3 d4 // 101
 p3= d2 d3 d4 // 001
 p4= d5 // 0

Suponiendo PARIDAD PAR: 0 si es par, 1 si es impar la cantidad de 1.

   0	  0		  1		  1		  0		  0		  1		  0		  0
 |___|	|___|	|___|	|___|	|___|	|___|	|___|	|___|	|___|
 p1      p2   	 d1    	 p3   	 d2    	 d3    	 d4    	 p4    	 d5
 0001	0010	0011	0100	0101	0110	0111	1000	1001


=======================================================================
 Decodificar Hamming

 0 0 0 1 0 0 1 0 0

 9 elementos; indicamos los bits de paridad

 p1=0
 p2=0
 p3=1
 p4=0

 d1=0
 d2=0
 d3=0
 d4=1
 d5=1

 p1 -> 0001 -> d1 d2 d4 d5 	
 p2 -> 0010 -> d1 d3 d4 	
 p3 -> 0100 -> d2 d3 d4		
 p4 -> 1000 -> d5			

 Suponiendo que la paridad es par, es decir, cantidad 1 pares =0; cantidad de 1 impares = 1

Si algo esta bien, ponemos 0; si algo esta mal, ponemos 1

 p1=	0	0	1	0		p1=0 y deberia valer 1, esta mal => codigo 1
 		d1	d2	d4	d5

 p2=	0	0	1			p2=0 y deberia valer 1, esta mal => codigo 1
 		d1	d3	d4

 p3=	0	0	1			p3=1 y debe valer 1, esta bien => codigo 0
 		d2	d3	d4

 p4= 	0					p4=0 y debe valer 0, esta bien => codigo 0
 		d5

leyendo los codigos al reves (desde p4 hacia p1) se lee 0011.

Entonces determinamos que en la posición 0011 (d1), se encuentra el error en el dato ingresado. Modificando el valor, el código estaría bien ćodificado. En este caso d1=0; por lo que al corregirlo decimos que d1=1.

Si el error nos da en un digito que es superior a la cantidad de digitos que poseemos, por ejemplo, en este caso: 1010 (posición 10 y tenemos 9); determinamos que el error se encuentra en más de un bit y no se puede determinar dónde esta el error.

